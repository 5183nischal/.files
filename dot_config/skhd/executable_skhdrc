# vim:foldmethod=marker:foldlevel=0

# Sample config reference: https://github.com/koekeishiya/skhd/blob/master/examples/skhdrc
# Keywords (modifiers and literals): https://github.com/koekeishiya/skhd/issues/1

# MNEMONIC:
# 1). Left ALT for changing focus (window, space, monitor)
# 2). ALT + SHIFT for window operation
# 3). ALT + CTRL for space operation
# 4). MEH (ALT + CTRL + SHIFT) for toggling window properties
# 5). FN for changing window size
# 6). FN + SHIFT for floating window operation

# Mode declaration
# 1) default: all keybindings are available
# 2) passthrough: all keybindings are unavailable. (If some keybindings conflict with some application, we can turn off skhd)
:: default : yabai -m config active_window_border_color 0xffffbb7d;\
             osascript -e "display notification \"skhd enabled!\" with title \"skhd\""

:: passthrough : yabai -m config active_window_border_color 0xff8d5524;\
                 osascript -e "display notification \"skhd disabled!\" with title \"skhd\""

# Mode switching
hyper - x ; passthrough
passthrough < hyper - x ; default

# Restart yabai
hyper - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# ================ Emacs everywhere ================
alt - e : emacsclient --eval "(emacs-everywhere)"


# Stackline keys
# Focus window up/down in stack
alt - n : yabai -m window --focus stack.next
alt - p : yabai -m window --focus stack.prev

# Add the active window  to the window or stack to the {direction}
# Note that this only works when the active window does *not* already belong to a stack
alt + shift - left  : yabai -m window west --stack $(yabai -m query --windows --window | jq -r '.id')
alt + shift - down  : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id')
alt + shift - up    : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id')
alt + shift - right : yabai -m window east --stack $(yabai -m query --windows --window | jq -r '.id')
alt + shift - 0x2C : yabai -m window --insert stack

# Open a new terminal window
# cmd - return : /Applications/kitty.app/Contents/MacOS/kitty

# ========== Changing focus (Left alt ) ========== {{{

# Focus window
#   - k, j: focus the window above or below
#   - h, j: focus the window left or right (support moving the focus across the display)
#   - r:    focus the recently-focused window
#   - <, >: cycle through the windows in the stack backward or forward
#   - /:    focus the recently-focused window in the stack
#   - m:    focus the fullscreen window in the current workspace or cycle through all the fullscreen windows
lalt - k : yabai -m window --focus north
lalt - j : yabai -m window --focus south
lalt - h : yabai -m window --focus west || \
          yabai -m window --focus $(yabai -m query --windows --display west | \
                                    jq 'map(select(.visible == 1)) | sort_by(.frame.x, .frame.y) | last | .id') || \
          yabai -m display --focus west
lalt - l : yabai -m window --focus east || \
          yabai -m window --focus $(yabai -m query --windows --display east | \
                                    jq 'map(select(.visible == 1)) | sort_by(.frame.x, .frame.y) | first | .id') || \
          yabai -m display --focus east
lalt - r : yabai -m window --focus recent
lalt - 0x2B : yabai -m window --focus stack.prev || yabai -m window --focus stack.last
lalt - 0x2F : yabai -m window --focus stack.next || yabai -m window --focus stack.first
lalt - 0x2C : yabai -m window --focus stack.recent
lalt - space : yabai -m space --toggle gap && yabai -m space --toggle padding && yabai -m window --toggle border && yabai -m window --toggle zoom-fullscreen

# Focus workspace
#   - 1-0:  focus the workspace #1-#10
#   - [, ]: cycle through the workspaces (support moving the focus across the display)
#     e.g., 4 | 1 2 | 3 (three displays and currently at 2, using [ to move the focus 2 -> 1 -> 4 -> 3 -> 2, ..., ] is the same but on the opposite direction
#   - \:    focus the recently-focused workspace
lalt - 1 : yabai -m space --focus 1
lalt - 2 : yabai -m space --focus 2
lalt - 3 : yabai -m space --focus 3
lalt - 4 : yabai -m space --focus 4
lalt - 5 : yabai -m space --focus 5
lalt - 6 : yabai -m space --focus 6
lalt - 7 : yabai -m space --focus 7
lalt - 8 : yabai -m space --focus 8
lalt - 9 : yabai -m space --focus 9
lalt - 0 : yabai -m space --focus 10
lalt - 0x21 : yabai -m space --focus $(cur_space=$(yabai -m query --spaces --space | jq -r '.index') && \
                                      yabai -m query --displays | jq -r "sort_by(.frame.x) | [.[] | .spaces] | flatten | if index($cur_space) == 0 then last else .[index($cur_space) - 1] end")
lalt - 0x1E : yabai -m space --focus $(cur_space=$(yabai -m query --spaces --space | jq -r '.index') && \
                                      yabai -m query --displays | jq -r "sort_by(.frame.x) | [.[] | .spaces] | flatten | if index($cur_space) + 1 == length then first else .[index($cur_space) + 1] end")
lalt - 0x2A : yabai -m space --focus recent

# Focus display
#   - u, i, o: focus the left display, the middle display, or the right display
#   - z, x:    cycle through the displays
#   - c:       focus the recently-focused display
lalt - u : yabai -m display --focus $(yabai -m query --displays | jq 'sort_by(.frame.x) | .[0].index')
lalt - i : yabai -m display --focus $(yabai -m query --displays | jq 'sort_by(.frame.x) | .[1].index')
lalt - o : yabai -m display --focus $(yabai -m query --displays | jq 'sort_by(.frame.x) | .[2].index')
lalt - z : yabai -m display --focus west || yabai -m display --focus $(yabai -m query --displays | jq 'sort_by(.frame.x) | last.index')
lalt - x : yabai -m display --focus east || yabai -m display --focus $(yabai -m query --displays | jq 'sort_by(.frame.x) | first.index')
lalt - c : yabai -m display --focus recent

# }}} Changing focus

# ========== Window operations (ALT + SHIFT) ========== {{{

# Move (swap) window
#   - k, j, h, l: swap the current window with the window above, below, left, or right
#   - r:          swap the current window with the recently-focused window
alt + shift - k : yabai -m window --swap north
alt + shift - j : yabai -m window --swap south
alt + shift - h : yabai -m window --swap west
alt + shift - l : yabai -m window --swap east
alt + shift - r : yabai -m window --swap recent

# Send window to workspace and follow focus
#   - 1-0:  send the current window to the workspace #1-#10, and focus that window
#   - [, ]: send the current window to the workspace on its left or right (support sending across the display and cycling through), and focus that window
#     e.g., 4 | 1 2 | 3 (three display and currently at 3), [ will move the current window to workspace #2 and focus this window on workspace #2, and ] will move the current window to workspace #4 and focus this window on workspace #4
#   - \:    send the current window to the recently-focused workspace, and focus that window
alt + shift - 1 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space 1 && \
                  yabai -m window --focus ${cur_window}
alt + shift - 2 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space 2 && \
                  yabai -m window --focus ${cur_window}
alt + shift - 3 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space 3 && \
                  yabai -m window --focus ${cur_window}
alt + shift - 4 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space 4 && \
                  yabai -m window --focus ${cur_window}
alt + shift - 5 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space 5 && \
                  yabai -m window --focus ${cur_window}
alt + shift - 6 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space 6 && \
                  yabai -m window --focus ${cur_window}
alt + shift - 7 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space 7 && \
                  yabai -m window --focus ${cur_window}
alt + shift - 8 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space 8 && \
                  yabai -m window --focus ${cur_window}
alt + shift - 9 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space 9 && \
                  yabai -m window --focus ${cur_window}
alt + shift - 0 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space 10 && \
                  yabai -m window --focus ${cur_window}
alt + shift - 0x21 : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                     workspace_left=$(cur_space=$(yabai -m query --spaces --space | jq -r '.index') && \
                                      yabai -m query --displays | jq -r "sort_by(.frame.x) | [.[] | .spaces] | flatten | if index($cur_space) == 0 then .[length - 1] else .[index($cur_space) - 1] end") && \
                     yabai -m window --space ${workspace_left} && \
                     yabai -m window --focus ${cur_window}
alt + shift - 0x1E : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                     workspace_right=$(cur_space=$(yabai -m query --spaces --space | jq -r '.index') && \
                                      yabai -m query --displays | jq -r "sort_by(.frame.x) | [.[] | .spaces] | flatten | if index($cur_space) + 1 == length then .[0] else .[index($cur_space) + 1] end") && \
                     yabai -m window --space ${workspace_right} && \
                     yabai -m window --focus ${cur_window}
alt + shift - 0x2A : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                     yabai -m window --space recent && \
                     yabai -m window --focus ${cur_window}

# Send window to display (monitor) and follow focus
#   - u, i, o: send the current window to the left, middle, or right display, and focus that window
#   - z, x: send the current window to the display on the left, on the right (support cycling through), and focus that window
#   - c:    send the current window to the recently-focused display, and focus that window
alt + shift - u : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  display_left=$(yabai -m query --displays | jq 'sort_by(.frame.x) | .[0].index') && \
                  yabai -m window --display ${display_left} && \
                  yabai -m window --focus ${cur_window}
alt + shift - i : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  display_middle=$(yabai -m query --displays | jq 'sort_by(.frame.x) | .[1].index') && \
                  yabai -m window --display ${display_middle} && \
                  yabai -m window --focus ${cur_window}
alt + shift - o : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  display_right=$(yabai -m query --displays | jq 'sort_by(.frame.x) | .[2].index') && \
                  yabai -m window --display ${display_right} && \
                  yabai -m window --focus ${cur_window}
alt + shift - z : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  ( yabai -m window --display west && yabai -m window --focus ${cur_window} || \
                    last=$(yabai -m query --displays | jq 'sort_by(.frame.x) | last.index') && yabai -m window --display ${last} && yabai -m window --focus ${cur_window} )
alt + shift - x : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  ( yabai -m window --display east && yabai -m window --focus ${cur_window} || \
                    first=$(yabai -m query --displays | jq 'sort_by(.frame.x) | first.index') && yabai -m window --display ${first} && yabai -m window --focus ${cur_window} )
alt + shift - c : cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --display recent && \
                  yabai -m window --focus ${cur_window}

# Warp (re-insert)
#   - w, s, a, d: re-insert the current window, splitting the window above, below, left, or right
alt + shift - w : yabai -m window --warp north
alt + shift - s : yabai -m window --warp south
alt + shift - a : yabai -m window --warp west
alt + shift - d : yabai -m window --warp east

# Set/unset the insertion position for a new window to be opened in terms of the current window
#   - up, down, left, right: set/unset the insertion position to the up, down, left, right
#   - /:                     set/unset the insertion to be stack mode
#alt + shift - up : yabai -m window --insert north
#alt + shift - down : yabai -m window --insert south
#alt + shift - left : yabai -m window --insert west
#alt + shift - right : yabai -m window --insert east
#alt + shift - 0x2C : yabai -m window --insert stack

# Create a workspace, move window there and follow focus
#   - n: create a new workspace at the end (within the current display), move the current window to that workspace, and focus the window
alt + shift - n : yabai -m space --create && \
                  index=$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index') && \
                  cur_window=$(yabai -m query --windows --window | jq '.id') && \
                  yabai -m window --space ${index} && \
                  yabai -m window --focus ${cur_window}

# }}} Window operations

# ========== Space operations (ALT + CTRL) ========== {{{

# Create a workspace and follow focus
#   -n: create a new workspace at the end (within the current display), and focus the workspace
alt + ctrl - n : yabai -m space --create && \
                 index=$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index') && \
                 yabai -m space --focus ${index}

# Destroy the current workspace, send the windows on this workspace to workspace #1, and focus workspace #1
alt + ctrl - w : yabai -m space --destroy

# Move workspace to display (monitor) and follow focus
#   - u, i, o: move the current workspace to the left, middle, or right display, and focus that workspace
#   - z, x:    move the current workspace to the display on the left, on the right (support cycling through), and focus that workspace
#   - c:       move the current workspace to the recently-focused display, and focus that workspace
alt + ctrl - u : yabai -m space --display $(yabai -m query --displays | jq 'sort_by(.frame.x) | .[0].index')
alt + ctrl - i : yabai -m space --display $(yabai -m query --displays | jq 'sort_by(.frame.x) | .[1].index')
alt + ctrl - o : yabai -m space --display $(yabai -m query --displays | jq 'sort_by(.frame.x) | .[2].index')
alt + ctrl - z : yabai -m space --display west || \
                 last=$(yabai -m query --displays | jq 'sort_by(.frame.x) | last.index') && yabai -m space --display ${last}
alt + ctrl - x : yabai -m space --display east || \
                 first=$(yabai -m query --displays | jq 'sort_by(.frame.x) | first.index') && yabai -m space --display ${first}
alt + ctrl - c : yabai -m space --display recent

# Move workspace to the given position (must be on the same display, all the other workspaces after the position will move backward)
#   - [, ]: move the current workspace to the previous, or next position
#   - 1-0:  move the current workspace to the position 1-10
alt + ctrl - 0x21 : yabai -m space --move prev && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 0x1E : yabai -m space --move next && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 1 : yabai -m space --move 1 && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 2 : yabai -m space --move 2 && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 3 : yabai -m space --move 3 && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 4 : yabai -m space --move 4 && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 5 : yabai -m space --move 5 && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 6 : yabai -m space --move 6 && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 7 : yabai -m space --move 7 && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 8 : yabai -m space --move 8 && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 9 : yabai -m space --move 9 && open -g 'swiftbar://refreshplugin?name=yabai'
alt + ctrl - 0 : yabai -m space --move 10 && open -g 'swiftbar://refreshplugin?name=yabai'

# Change workspace layout
#   - b, f, s: chagne the layout of the current workspace to bsp, float, or stack
alt + ctrl - b : yabai -m space --layout bsp && \
                 open -g 'swiftbar://refreshplugin?name=yabai' && \
                 osascript -e "display notification \"Change the workspace layout to bsp\" with title \"yabai\""
alt + ctrl - f : yabai -m space --layout float && \
                 open -g 'swiftbar://refreshplugin?name=yabai' && \
                 osascript -e "display notification \"Change the workspace layout to float\" with title \"yabai\""
alt + ctrl - s : yabai -m space --layout stack && \
                 open -g 'swiftbar://refreshplugin?name=yabai' && \
                 osascript -e "display notification \"Change the workspace layout to stack\" with title \"yabai\""

# }}} Space operations

# ========== Toggle window properties (MEH - ALT + CTRL + SHIFT)  ========== {{{

# Toggle window between tiling and floating, and restore its previous position when become floating
meh - t : ~/.config/yabai/scripts/toggle-window-floating-tiling.sh

# Toggle window fullscreen zoom
# meh - m : yabai -m window --toggle zoom-fullscreen
lalt - f : yabai -m window --toggle zoom-fullscreen

# Restore all zoom-fullscreen windows
meh - 0 : yabai -m query --windows --space | \
          jq '.[] | select(."zoom-fullscreen" == 1) | .id' | \
          xargs -I{} yabai -m window {} --toggle zoom-fullscreen

# Toggle window split type (horizontally or vertically in terms of its parent)
meh - s : yabai -m window --toggle split

# Toggle window topmost (i.e., pin the window)
meh - p : yabai -m window --toggle topmost

# Toggle sticky (i.e., showing on all spaces)
meh - a : yabai -m window --toggle sticky

# Toggle window border
meh - b : yabai -m window --toggle border

# }}} Toggle window properties

# ========== Adjust window size (FN) ========== {{{

# Adjust the window (floating or tiling window) size by adjusting its upper, lower, left, right edge of the window in 20 pixels
#               7(+)
#      -----------------------
#      |        u(-)         |
#      |                     |
# h(+) | j(-)           k(-) | l(+)
#      |        n(-)         |
#      |----------------------
#               space(+)

fn - u : yabai -m window --resize top:0:20          # top-
fn - 7 : yabai -m window --resize top:0:-20         # top+
fn - n : yabai -m window --resize bottom:0:-20      # bottom-
fn - space : yabai -m window --resize bottom:0:20   # bottom+
fn - j : yabai -m window --resize left:20:0         # left-
fn - h : yabai -m window --resize left:-20:0        # left+
fn - k : yabai -m window --resize right:-20:0       # right-
fn - l : yabai -m window --resize right:20:0        # right+

# Balance size
#   - 0: balance the sizes of the tiling windows in the curren workspace
fn - 0 : yabai -m space --balance

# }}} Adjust window size

# ========== Floating window operations (FN + SHIFT) ========== {{{

# Movement
#   - k, j, h, l: move the current floating window to the up, down, left, or right by 20 pixels
fn + shift - k : yabai -m window --move rel:0:-20
fn + shift - j : yabai -m window --move rel:0:20
fn + shift - h : yabai -m window --move rel:-20:0
fn + shift - l : yabai -m window --move rel:20:0

# Split screen
fn + shift - w : yabai -m window --grid 2:1:0:0:1:1   # upper-half
fn + shift - s : yabai -m window --grid 2:1:0:1:1:1   # lower-half
fn + shift - a : yabai -m window --grid 1:2:0:0:1:1   # left-half
fn + shift - d : yabai -m window --grid 1:2:1:0:1:1   # right-half

# Fullscreen
fn + shift - m : yabai -m window --grid 1:1:0:0:1:1

# Restore: centered and properly resized based on the display position (horizontally or vertically positioned)
fn + shift - 0 : read w h <<< $(echo $(yabai -m query --displays --display | jq .frame | jq '.w, .h')) && \
                 ( [ $w -gt $h ] && yabai -m window --grid 7:5:1:1:3:5 || yabai -m window --grid 5:10:1:1:8:2 )

# }}} Floating window operations
