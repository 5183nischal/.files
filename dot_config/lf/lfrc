#!/bin/sh

# prompt
set promptfmt "[\033[32;1m%u\033[0m]:[\033[34;1m%d\033[0m\033[1m%f\033[0m]"

# script
set previewer ~/.config/lf/preview_kitty_img.sh
set cleaner ~/.config/lf/clean_kitty_img.sh

# opts
set shell bash
set shellopts '-eu'
set ifs "\n"
set incsearch
set smartcase
set anchorfind
set findlen 1
set tabstop 4
set info 'size'
# set hidden true
# set drawbox true
set icons true
set ignorecase true
# set relativenumber true
set sortby 'natural'; set info size
set scrolloff 10

# ========== Commands ==========

# Override the default open for file opening (binded to 'l' by default)
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# Create a directory with the selected items
cmd new-folder-with-selection ${{
  set -f
  printf "Directory name: "
  read newd
  mkdir -- "$newd"
  mv -- $fx "$newd"
}}

cmd chmod ${{
  printf "\nMode Bits: "
  read ans
  for file in "$fx"
  do
    chmod $ans $file
  done
  lf -remote 'send reload'
}}

cmd extract ${{
  set -f
  case $f in
    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
    *.tar.gz|*.tgz) tar xzvf $f;;
    *.tar.xz|*.txz) tar xJvf $f;;
    *.tar) tar xvf $f;;
    *.zip) unzip $f;;
    *.rar) unrar x $f;;
    *.7z) 7z x $f;;
    *) echo "Unsupported format";;
  esac
}}

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd delete ${{
  set -f
  printf "\n$fx\n"
  printf "delete?[y/N]"
  read ans
  if [[ $ans == "y" ]]; then
    rm -rf $fx
  fi
}}

cmd trash !{{
  set -f
  printf "Items to be trashed:\n$fx\n\nTrash? [y/N]"
  read ans
  if [[ $ans == "y" ]]; then
    trash $fx && echo "Trash complete!"
  elif [[ $ans == "n" ]]; then
    echo "Canceled!"
  else
    echo "Failed! Use y to trash."
  fi
}}

cmd select-all :unselect; invert

# Bulk rename on selected files or all the non-hidden files in the current directory if no selection
cmd bulk-rename ${{
  old="$(mktemp)"
  new="$(mktemp)"
  if [ -n "$fs" ]; then
    fs="$(basename $fs)"
  else
    fs="$(ls)"
  fi
  printf '%s\n' "$fs" >"$old"
  printf '%s\n' "$fs" >"$new"
  $EDITOR "$new"
  [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
  paste "$old" "$new" | while IFS= read -r names; do
    src="$(printf '%s' "$names" | cut -f1)"
    dst="$(printf '%s' "$names" | cut -f2)"
    if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
        continue
    fi
    mv -- "$src" "$dst"
  done
  rm -- "$old" "$new"
  lf -remote "send $id unselect"
}}

# Copy the file names (including extension) of the selections separated by \n
cmd copy-filename ${{
  names="$(echo $fx | tr ' ' '\n' | xargs -I{} basename {})"
  echo $names | tr ' ' '\n' | pbcopy
}}

# Copy the absolute paths of selections separated by \n
cmd copy-absolute-path ${{
  echo $fx | tr ' ' '\n' | pbcopy
}}

# Select the file or directory via fzf
cmd fzf-select ${{
  IFS=' '
  exclude=$(cat $HOME/exclude | sed 's/^/--exclude /' | tr '\n' ' ')
  select=$(fd --hidden --follow $exclude | fzf)
  lf -remote "send $id select $select"
}}

# cd into the selected directory via fzf
cmd fzf-cd ${{
  IFS=' '
  exclude=$(cat $HOME/exclude | sed 's/^/--exclude /' | tr '\n' ' ')
  select=$(fd --type d --hidden --follow $exclude | fzf)
  lf -remote "send $id cd $select"
}}

cmd z %{{
	result="$(zoxide query --exclude $PWD $@)"
	lf -remote "send $id cd $result"
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rga --files-with-matches --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
# ========== Mappings ==========

# Remove some defaults
map gh
map d
map y
map <space>
map zh

map . set hidden!
map <tab> :toggle;down
map yy copy
map yn copy-filename
map yP copy-absolute-path
map <enter> shell
map D delete
map T trash
# list the size of each item in the current directory
map U !printf "\n";du -csh *
map <c-f> fzf-select
map <c-j> fzf-cd

# give a name and then make a directory
map <c-n> push :mkdir<space>
map <a-n> new-folder-with-selection
map x cut
# give a name and then use neovim to edit it
map V push :!nvim<space>

# Navigate among the parent directories
map [ push hkl
map ] push hjl

# Rename
map A rename # at the very end
map I push A<c-a> # at the very beginning
map r push A<c-u> # new rename
map <c-r> bulk-rename

# Use <space> as the leader key
# compress (give a name like abc and it will compress the selected items to abc.zip)
map <space>c push :zip<space>
# extract
map <space>x extract
# Open the directory in Finder on macOS
map <space>f &if [[ -d $f ]]; then open $f; fi
map <space>s fzf_search

# bookmaks key
map Jh cd ~
map Jc cd ~/.config
map Jt cd ~/.Trash
map Ju cd ~/Documents/Place_cells_unified
map Jn cd ~/Documents/notes
map Ji cd ~/Documents/info_and_coding_in_the_brain
map Jl cd ~/Documents/papers_library
map Jp cd ~/Documents/projects
map Jd cd ~/Downloads
map Jf cd ~/Documents
map Jb cd /opt/homebrew
